# bot_part_2.py - –ß–∞—Å—Ç—å 2/7
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞, SSL, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

import requests
import ssl
import socket
import time
from urllib.parse import urlparse
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞ (HTTP) ===
def check_website(url: str, timeout: int = 10):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ —Å–∞–π—Ç –ø–æ HTTP.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
    """
    if not url.startswith(("http://", "https://")):
        url = "https://" + url

    try:
        start_time = time.time()
        response = requests.get(
            url,
            timeout=timeout,
            headers={"User-Agent": "WebsiteAuditBot/1.0"}
        )
        load_time = round(time.time() - start_time, 2)
        status_code = response.status_code
        status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if status_code == 200 else f"‚ùå –û—à–∏–±–∫–∞ {status_code}"
        size_kb = round(len(response.content) / 1024, 2)
        charset_ok = "utf-8" in response.headers.get("Content-Type", "").lower()

        return {
            "url": url,
            "is_ok": status_code == 200,
            "status": status,
            "status_code": status_code,
            "load_time": f"{load_time} —Å–µ–∫",
            "size_kb": size_kb,
            "headers": dict(response.headers),
            "charset_ok": charset_ok,
            "error": None
        }
    except requests.exceptions.Timeout:
        return {
            "url": url,
            "is_ok": False,
            "status": "üî¥ –¢–∞–π–º–∞—É—Ç",
            "error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è",
            "load_time": "N/A",
            "size_kb": "N/A"
        }
    except requests.exceptions.ConnectionError:
        return {
            "url": url,
            "is_ok": False,
            "status": "üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            "load_time": "N/A",
            "size_kb": "N/A"
        }
    except Exception as e:
        return {
            "url": url,
            "is_ok": False,
            "status": "üî¥ –û—à–∏–±–∫–∞",
            "error": str(e),
            "load_time": "N/A",
            "size_kb": "N/A"
        }


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ===
def check_ssl(url: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –æ—à–∏–±–∫–æ–π.
    """
    parsed = urlparse(url)
    hostname = parsed.netloc.split(":")[0] if ":" in parsed.netloc else parsed.netloc

    if not hostname:
        return {"valid": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π URL"}

    port = 443
    context = ssl.create_default_context()

    try:
        with socket.create_connection((hostname, port), timeout=10) as sock:
            with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                cert = ssock.getpeercert()
                subject = dict(x[0] for x in cert['subject'])
                issuer = dict(x[0] for x in cert['issuer'])
                expires = cert['notAfter']

                # –ü—Ä–æ–≤–µ—Ä–∏–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–µ–π—á–∞—Å
                expires_dt = datetime.strptime(expires, "%b %d %H:%M:%S %Y %Z")
                now = datetime.utcnow()
                valid_now = now < expires_dt

                return {
                    "valid": valid_now,
                    "hostname": hostname,
                    "issued_to": subject.get('commonName', 'N/A'),
                    "issued_by": issuer.get('commonName', 'N/A'),
                    "expires": expires,
                    "expired": not valid_now,
                    "error": None
                }
    except ssl.SSLError as e:
        return {"valid": False, "error": f"SSL –æ—à–∏–±–∫–∞: {str(e)}"}
    except socket.gaierror:
        return {"valid": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å DNS"}
    except Exception as e:
        return {"valid": False, "error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"}


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ) ===
def check_mobile(url: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∞–π—Ç —Å User-Agent –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    """
    mobile_headers = {
        "User-Agent": (
            "Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) "
            "AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1"
        )
    }

    try:
        start_time = time.time()
        response = requests.get(url, headers=mobile_headers, timeout=10)
        load_time = round(time.time() - start_time, 2)
        size_kb = round(len(response.content) / 1024, 2)

        return {
            "is_ok": response.status_code == 200,
            "load_time": f"{load_time} —Å–µ–∫",
            "size_kb": size_kb,
            "status_code": response.status_code,
            "error": None
        }
    except Exception as e:
        return {
            "is_ok": False,
            "load_time": "N/A",
            "size_kb": "N/A",
            "status_code": "N/A",
            "error": str(e)
        }


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ PageSpeed (–æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚Äî —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ API) ===
def get_pagespeed_result(url: str):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è PageSpeed. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π API, –Ω–æ —ç—Ç–æ –ø–ª–∞—Ç–Ω–æ.
    –°–µ–π—á–∞—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞.
    """
    return {
        "score": "N/A",
        "fcp": "N/A",
        "lcp": "N/A",
        "cls": "N/A",
        "error": "PageSpeed –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —Ö–æ—Å—Ç–∏–Ω–≥–µ"
    }


logger.info("‚úÖ –ß–∞—Å—Ç—å 2/7: –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–∞, SSL –∏ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
