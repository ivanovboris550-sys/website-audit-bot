# bot_part_6.py - –ß–∞—Å—Ç—å 6/7
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ–ø–ª–∞—Ç–∞, –Ω–∞—á–∞–ª–æ –∞—É–¥–∏—Ç–∞

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, MessageHandler, filters
import re
from urllib.parse import urlparse

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
main_menu_keyboard = [
    ["üîç –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"],
    ["üí≥ –ë–∞–∑–æ–≤—ã–π –∞—É–¥–∏—Ç ‚Äî 300 —Ä—É–±"],
    ["üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞—É–¥–∏—Ç ‚Äî 700 —Ä—É–±"],
    ["üìå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ‚Äî 1000 —Ä—É–±/–º–µ—Å"],
    ["üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º"]
]

back_keyboard = [["–ù–∞–∑–∞–¥"]]

main_menu_markup = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=False)
back_markup = ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True)


# === –§—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL ===
def is_valid_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º URL."""
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except Exception:
        return False


# === –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    text = update.message.text.strip()
    chat_id = update.effective_chat.id
    username = update.effective_user.username or update.effective_user.full_name

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    from bot_part_1 import log_action
    log_action(chat_id, username, "message", text)

    # === –ö–æ–º–∞–Ω–¥–∞ /start ===
    if text == "/start":
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É —Å–∞–π—Ç–æ–≤.\n\n"
            "–Ø –ø–æ–º–æ–≥—É:\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç –Ω–∞ –æ—à–∏–±–∫–∏\n"
            "‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SEO\n"
            "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "‚Ä¢ –î–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_markup
        )
        return

    # === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
    elif text == "üîç –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com):",
            reply_markup=back_markup
        )
        context.user_data['state'] = 'awaiting_free_check'
        return

    elif text == "üí≥ –ë–∞–∑–æ–≤—ã–π –∞—É–¥–∏—Ç ‚Äî 300 —Ä—É–±":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞—É–¥–∏—Ç–∞:",
            reply_markup=back_markup
        )
        context.user_data['state'] = 'awaiting_basic_audit'
        return

    elif text == "üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞—É–¥–∏—Ç ‚Äî 700 —Ä—É–±":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞—É–¥–∏—Ç–∞:",
            reply_markup=back_markup
        )
        context.user_data['state'] = 'awaiting_advanced_audit'
        return

    elif text == "üìå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ‚Äî 1000 —Ä—É–±/–º–µ—Å":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:",
            reply_markup=back_markup
        )
        context.user_data['state'] = 'awaiting_monitoring'
        return

    elif text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º":
        await update.message.reply_text(
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º: @ivanovboris550\n\n"
            "–û–Ω –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.",
            reply_markup=main_menu_markup
        )
        return

    elif text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_markup)
        context.user_data.clear()
        return

    # === –û–∂–∏–¥–∞–Ω–∏–µ URL –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ===
    elif context.user_data.get('state') == 'awaiting_free_check':
        if not is_valid_url(text):
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: https://example.com")
            return

        url = text
        context.user_data['url'] = url
        context.user_data['audit_type'] = 'free'

        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å", callback_data="confirm_start")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç", callback_data="change_url")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"–°–∞–π—Ç: {url}\n\n"
            "–ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É?",
            reply_markup=reply_markup
        )

    # === –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ===
    elif context.user_data.get('state') in ['awaiting_basic_audit', 'awaiting_advanced_audit', 'awaiting_monitoring']:
        if not is_valid_url(text):
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: https://example.com")
            return

        url = text
        audit_map = {
            'awaiting_basic_audit': 'basic',
            'awaiting_advanced_audit': 'advanced',
            'awaiting_monitoring': 'monitoring'
        }
        context.user_data['url'] = url
        context.user_data['audit_type'] = audit_map[context.user_data['state']]

        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å", callback_data="confirm_start")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç", callback_data="change_url")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        prices = {'basic': '300 —Ä—É–±', 'advanced': '700 —Ä—É–±', 'monitoring': '1000 —Ä—É–±/–º–µ—Å'}
        price_text = prices[context.user_data['audit_type']]

        await update.message.reply_text(
            f"–°–∞–π—Ç: {url}\n–¢–∏–ø —É—Å–ª—É–≥–∏: {price_text}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—É—Å–∫?",
            reply_markup=reply_markup
        )

    # === –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ===
    else:
        await update.message.reply_text(
            "üî¥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
            reply_markup=main_menu_markup
        )


logger.info("‚úÖ –ß–∞—Å—Ç—å 6/7: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –º–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
