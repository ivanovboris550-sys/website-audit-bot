# bot_part_5.py - –ß–∞—Å—Ç—å 5/7
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á—ë—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é fpdf2

from fpdf import FPDF
import os
import base64
import datetime

# –ü—É—Ç–∏ –∫ —à—Ä–∏—Ñ—Ç–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º Helvetica
ARIAL_REGULAR = "fonts/arial.ttf"
ARIAL_BOLD = "fonts/arialbd.ttf"

def create_pdf_from_data(chat_id, data, report_type="basic"):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-–æ—Ç—á—ë—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö.
    report_type: "basic", "advanced"
    """
    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)

    # === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Arial (–µ—Å–ª–∏ —Ñ–∞–π–ª—ã –µ—Å—Ç—å) ===
    use_arial = False
    if os.path.exists(ARIAL_REGULAR) and os.path.exists(ARIAL_BOLD):
        try:
            pdf.add_font("Arial", "", ARIAL_REGULAR)
            pdf.add_font("Arial", "B", ARIAL_BOLD)
            pdf.set_font("Arial", size=12)
            use_arial = True
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Arial: {e}")
            pdf.set_font("Helvetica", size=12)
    else:
        pdf.set_font("Helvetica", size=12)

    # === –ó–∞–≥–æ–ª–æ–≤–æ–∫ ===
    pdf.set_font("Arial", "B", 16) if use_arial else pdf.set_font("Helvetica", "B", 16)
    pdf.set_text_color(0, 0, 0)
    pdf.cell(0, 10, "–û—Ç—á—ë—Ç –ø–æ —Å–∞–π—Ç—É", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT, align='C')
    pdf.ln(5)

    # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    pdf.set_font("Arial", size=12) if use_arial else pdf.set_font("Helvetica", size=12)
    pdf.set_text_color(60, 60, 60)
    pdf.cell(0, 8, f"–°–∞–π—Ç: {data['url']}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
    pdf.cell(0, 8, f"–î–∞—Ç–∞: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
    pdf.ln(10)

    # === –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ ===
    result = data.get("result", {})
    pdf.set_font("Arial", "B", 14) if use_arial else pdf.set_font("Helvetica", "B", 14)
    pdf.set_text_color(0, 0, 0)
    pdf.cell(0, 10, "üìä –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
    pdf.set_font("Arial", size=12) if use_arial else pdf.set_font("Helvetica", size=12)
    pdf.set_text_color(60, 60, 60)
    pdf.cell(0, 8, f"–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {result.get('status', 'N/A')}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)

    # –°–∫–æ—Ä–æ—Å—Ç—å
    load_time_str = result.get('load_time', 'N/A')
    try:
        load_time = float(load_time_str.split()[0])
        if load_time < 1.5:
            perf = "‚úÖ –û—Ç–ª–∏—á–Ω–æ"
        elif load_time < 3.0:
            perf = "üü° –°—Ä–µ–¥–Ω–µ"
        else:
            perf = "üî¥ –ü–ª–æ—Ö–æ"
    except:
        load_time = 5.0
        perf = "N/A"
    pdf.cell(0, 8, f"–°–∫–æ—Ä–æ—Å—Ç—å: {load_time_str}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
    pdf.cell(0, 8, f"–û—Ü–µ–Ω–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏: {perf}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)

    # SSL
    ssl_valid = result.get('ssl', {}).get('valid', False)
    if ssl_valid:
        pdf.set_text_color(0, 128, 0)
        pdf.cell(0, 8, "SSL: ‚úÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
    else:
        pdf.set_text_color(200, 0, 0)
        pdf.cell(0, 8, "SSL: ‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
    pdf.set_text_color(60, 60, 60)

    if result.get('size_kb'):
        pdf.cell(0, 8, f"–†–∞–∑–º–µ—Ä: {result['size_kb']} KB", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
    pdf.ln(8)

    # === SEO-–∞–Ω–∞–ª–∏–∑ ===
    meta = data.get("meta", {})
    if meta and "error" not in meta:
        pdf.set_font("Arial", "B", 14) if use_arial else pdf.set_font("Helvetica", "B", 14)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(0, 10, "üìå SEO-–∞–Ω–∞–ª–∏–∑", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_font("Arial", size=12) if use_arial else pdf.set_font("Helvetica", size=12)
        pdf.set_text_color(60, 60, 60)

        # H1
        pdf.cell(0, 8, f"H1: {meta.get('h1', 'N/A')}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)

        # Title
        pdf.cell(0, 8, f"Title: {meta.get('title', 'N/A')}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)

        # Meta Description
        desc = meta.get('meta_description') or 'N/A'
        if desc == 'N/A':
            pdf.set_text_color(200, 0, 0)
            pdf.cell(0, 8, "Meta Description: ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        else:
            desc_len = len(desc)
            if desc_len < 90:
                pdf.set_text_color(200, 100, 0)
                pdf.cell(0, 8, f"Meta Description: ‚ö† –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({desc_len} —Å–∏–º–≤.)", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
            elif desc_len > 160:
                pdf.set_text_color(200, 100, 0)
                pdf.cell(0, 8, f"Meta Description: ‚ö† –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({desc_len} —Å–∏–º–≤.)", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
            else:
                pdf.set_text_color(0, 128, 0)
                pdf.cell(0, 8, f"Meta Description: ‚úÖ –û—Ç–ª–∏—á–Ω–æ ({desc_len} —Å–∏–º–≤.)", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_text_color(60, 60, 60)

        # Viewport
        if meta.get('viewport'):
            pdf.set_text_color(0, 128, 0)
            pdf.cell(0, 8, "Viewport: ‚úÖ –ï—Å—Ç—å", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        else:
            pdf.set_text_color(200, 0, 0)
            pdf.cell(0, 8, "Viewport: ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_text_color(60, 60, 60)

        # Canonical
        if meta.get('canonical'):
            pdf.set_text_color(0, 128, 0)
            pdf.cell(0, 8, "Canonical: ‚úÖ –ï—Å—Ç—å", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        else:
            pdf.set_text_color(200, 0, 0)
            pdf.cell(0, 8, "Canonical: ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_text_color(60, 60, 60)

        # –Ø–∑—ã–∫ (lang)
        lang = meta.get('lang', 'N/A')
        pdf.cell(0, 8, f"–Ø–∑—ã–∫ (lang): {lang}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)

        # –ö–æ–¥–∏—Ä–æ–≤–∫–∞ (–∏–∑ headers)
        charset_ok = result.get("charset_ok", False)
        if charset_ok:
            pdf.set_text_color(0, 128, 0)
            pdf.cell(0, 8, "–ö–æ–¥–∏—Ä–æ–≤–∫–∞: ‚úÖ UTF-8", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        else:
            pdf.set_text_color(200, 0, 0)
            pdf.cell(0, 8, "–ö–æ–¥–∏—Ä–æ–≤–∫–∞: ‚ùå –ù–µ UTF-8", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_text_color(60, 60, 60)

        pdf.ln(8)

    # === robots.txt –∏ sitemap.xml ===
    robots = data.get("robots", {})
    if robots:
        pdf.set_font("Arial", "B", 14) if use_arial else pdf.set_font("Helvetica", "B", 14)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(0, 10, "üìÑ robots.txt –∏ sitemap.xml", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_font("Arial", size=12) if use_arial else pdf.set_font("Helvetica", size=12)
        pdf.set_text_color(60, 60, 60)

        # robots.txt
        robots_status = robots.get('robots_txt', 'N/A')
        if "–î–æ—Å—Ç—É–ø–µ–Ω" in robots_status:
            pdf.set_text_color(0, 128, 0)
            pdf.cell(0, 8, "robots.txt: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        elif "–ó–∞–ø—Ä–µ—â–∞–µ—Ç" in robots_status:
            pdf.set_text_color(200, 100, 0)
            pdf.cell(0, 8, "robots.txt: ‚ö† –ó–∞–ø—Ä–µ—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        else:
            pdf.set_text_color(200, 0, 0)
            pdf.cell(0, 8, f"robots.txt: ‚ùå {robots_status}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)

        # sitemap.xml
        sitemap_status = robots.get('sitemap_xml', 'N/A')
        if "–î–æ—Å—Ç—É–ø–µ–Ω" in sitemap_status:
            pdf.set_text_color(0, 128, 0)
            pdf.cell(0, 8, "sitemap.xml: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        else:
            pdf.set_text_color(200, 0, 0)
            pdf.cell(0, 8, f"sitemap.xml: ‚ùå {sitemap_status}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)

        pdf.set_text_color(60, 60, 60)
        pdf.ln(8)

    # === –ë–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏ ===
    broken_links = data.get("broken_links", [])
    if broken_links:
        pdf.set_font("Arial", "B", 14) if use_arial else pdf.set_font("Helvetica", "B", 14)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(0, 10, "üîó –ë–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏ (404)", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_font("Arial", size=12) if use_arial else pdf.set_font("Helvetica", size=12)
        pdf.set_text_color(200, 0, 0)
        for link in broken_links[:10]:
            pdf.cell(0, 8, f"‚ùå {link['url']} (–∫–æ–¥: {link['status']})", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        if len(broken_links) > 10:
            pdf.cell(0, 8, f"... –∏ –µ—â—ë {len(broken_links) - 10}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.ln(8)
    else:
        pdf.set_font("Arial", "B", 14) if use_arial else pdf.set_font("Helvetica", "B", 14)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(0, 10, "‚úÖ –ë–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_font("Arial", size=12) if use_arial else pdf.set_font("Helvetica", size=12)
        pdf.set_text_color(0, 128, 0)
        pdf.cell(0, 8, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.ln(8)

    # === –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===
    if data.get("chart_img"):
        pdf.set_font("Arial", "B", 14) if use_arial else pdf.set_font("Helvetica", "B", 14)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(0, 10, "üìà –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        img_data = base64.b64decode(data["chart_img"])
        temp_img_path = f"temp_chart_{chat_id}.png"
        with open(temp_img_path, "wb") as f:
            f.write(img_data)
        pdf.image(temp_img_path, x=10, w=180)
        os.remove(temp_img_path)
        pdf.ln(10)

    # === –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–º ===
    comparison = data.get("comparison", {})
    if comparison and isinstance(comparison, dict):
        pdf.set_font("Arial", "B", 14) if use_arial else pdf.set_font("Helvetica", "B", 14)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(0, 10, "üÜö –°–†–ê–í–ù–ï–ù–ò–ï –° –ö–û–ù–ö–£–†–ï–ù–¢–û–ú", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.ln(2)

        col_width = 60
        pdf.set_font("Arial", "B", 12) if use_arial else pdf.set_font("Helvetica", "B", 12)
        pdf.cell(col_width, 8, "–ü–∞—Ä–∞–º–µ—Ç—Ä", border=1, align='C')
        pdf.cell(col_width, 8, "–í–∞—à —Å–∞–π—Ç", border=1, align='C')
        pdf.cell(col_width, 8, "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç", border=1, align='C')
        pdf.ln(8)

        pdf.set_font("Arial", size=12) if use_arial else pdf.set_font("Helvetica", size=12)

        # Title
        pdf.cell(col_width, 8, "Title", border=1)
        pdf.cell(col_width, 8, str(comparison['title']['your'])[:50], border=1)
        pdf.cell(col_width, 8, str(comparison['title']['comp'])[:50], border=1)
        pdf.ln(8)

        # –î–ª–∏–Ω–∞ Title
        pdf.cell(col_width, 8, "–î–ª–∏–Ω–∞ Title", border=1)
        pdf.cell(col_width, 8, str(comparison['title']['your_len']), border=1)
        pdf.cell(col_width, 8, str(comparison['title']['comp_len']), border=1)
        pdf.ln(8)

        # H1
        pdf.cell(col_width, 8, "H1", border=1)
        pdf.cell(col_width, 8, str(comparison['h1']['your'])[:50], border=1)
        pdf.cell(col_width, 8, str(comparison['h1']['comp'])[:50], border=1)
        pdf.ln(8)

        # Viewport
        pdf.cell(col_width, 8, "Viewport", border=1)
        pdf.cell(col_width, 8, comparison['viewport']['your'], border=1)
        pdf.cell(col_width, 8, comparison['viewport']['comp'], border=1)
        pdf.ln(8)

        # Canonical
        pdf.cell(col_width, 8, "Canonical", border=1)
        pdf.cell(col_width, 8, comparison['canonical']['your'], border=1)
        pdf.cell(col_width, 8, comparison['canonical']['comp'], border=1)
        pdf.ln(8)

        # –°–∫–æ—Ä–æ—Å—Ç—å
        pdf.cell(col_width, 8, "–°–∫–æ—Ä–æ—Å—Ç—å", border=1)
        pdf.cell(col_width, 8, str(comparison['load_time']['your']), border=1)
        pdf.cell(col_width, 8, str(comparison['load_time']['comp']), border=1)
        pdf.ln(8)

        # –†–∞–∑–º–µ—Ä
        pdf.cell(col_width, 8, "–†–∞–∑–º–µ—Ä", border=1)
        pdf.cell(col_width, 8, str(comparison['size_kb']['your']), border=1)
        pdf.cell(col_width, 8, str(comparison['size_kb']['comp']), border=1)
        pdf.ln(8)

        pdf.ln(5)
    else:
        pdf.set_font("Arial", "B", 14) if use_arial else pdf.set_font("Helvetica", "B", 14)
        pdf.set_text_color(200, 100, 0)
        pdf.cell(0, 10, "‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_text_color(60, 60, 60)
        pdf.cell(0, 8, "–í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —Å–∞–π—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.ln(8)

    # === –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ) ===
    if report_type == "advanced":
        pdf.set_font("Arial", "B", 14) if use_arial else pdf.set_font("Helvetica", "B", 14)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(0, 10, "üë®‚Äçüíª –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_font("Arial", size=12) if use_arial else pdf.set_font("Helvetica", size=12)
        pdf.set_text_color(60, 60, 60)

        expert_comment = f"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ä–∏—Å üëã, —è –∫–∞–∫ —Ä–∞–∑ —Å–º–æ—Ç—Ä–µ–ª —Å–∞–π—Ç {data['url']} ‚Äî –∏ –≤–æ—Ç —á—Ç–æ —è –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É –¥—É–º–∞—é:\n\n"

        if load_time < 1.5:
            expert_comment += f"‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –°–∞–π—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∑–∞ {load_time} —Å–µ–∫ ‚Äî —ç—Ç–æ –æ—Ç–ª–∏—á–Ω–æ!\n"
        elif load_time < 3.0:
            expert_comment += f"üìä –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å ‚Äî {load_time} —Å–µ–∫. –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏.\n"
        else:
            expert_comment += f"üìâ –°–∞–π—Ç –≥—Ä—É–∑–∏—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ ‚Äî {load_time} —Å–µ–∫. –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ.\n"

        if not meta.get('viewport'):
            expert_comment += "‚ùå –ù–µ –∑–∞–¥–∞–Ω viewport ‚Äî —Å–∞–π—Ç –º–æ–∂–µ—Ç –ø–ª–æ—Ö–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö.\n"
        if not meta.get('canonical'):
            expert_comment += "‚ùå –ù–µ—Ç canonical ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—É–±–ª—è–º–∏.\n"
        if not meta.get('meta_description') or len(meta.get('meta_description', '')) < 90:
            expert_comment += "‚ö† Meta description —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ‚Äî –¥–æ–±–∞–≤—å—Ç–µ, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å CTR –≤ –ø–æ–∏—Å–∫–µ.\n"

        ssl_info = data['result'].get("ssl", {})
        if not ssl_info.get("valid", False) and data["url"].startswith("https://"):
            expert_comment += "üîê SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω ‚Äî —ç—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ.\n"
        elif data["url"].startswith("http://"):
            expert_comment += "üîí –°–∞–π—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS ‚Äî —ç—Ç–æ —É—è–∑–≤–∏–º–æ.\n"
        else:
            expert_comment += "‚úÖ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ.\n"

        expert_comment += (
            "\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —ç—Ç–∏—Ö –ø—Ä–æ–±–ª–µ–º. "
            "–ü–∏—à–∏—Ç–µ –º–Ω–µ: @ivanovboris550 ‚Äî —Å–¥–µ–ª–∞—é –≤—Å—ë –∑–∞ –≤–∞—Å."
        )

        pdf.multi_cell(0, 6, expert_comment)
        pdf.ln(5)

    # === –ü–æ–¥–≤–∞–ª ===
    pdf.set_font("Arial", size=10) if use_arial else pdf.set_font("Helvetica", size=10)
    pdf.set_text_color(100, 100, 100)
    pdf.cell(0, 8, "–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–æ–≤ ‚Ä¢ Website Audit Bot", align='C')

    # === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PDF ===
    pdf_path = f"reports/report_{chat_id}_{int(datetime.datetime.now().timestamp())}.pdf"
    os.makedirs("reports", exist_ok=True)
    try:
        pdf.output(pdf_path)
        return pdf_path
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
        return None