# bot_part_7.py - –ß–∞—Å—Ç—å 7/7
# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫, –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio
import logging
import sys

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π ===
try:
    from bot_part_1 import BOT_TOKEN, ADMIN_CHAT_ID, log_action
    logger.info("‚úÖ bot_part_1 –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except ImportError as e:
    logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bot_part_1: {e}")
    sys.exit(1)

try:
    from bot_part_6 import handle_message, main_menu_markup
    logger.info("‚úÖ bot_part_6 –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except ImportError as e:
    logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ bot_part_6: {e}")
    sys.exit(1)


# === –ö–æ–º–∞–Ω–¥–∞ /admin_check ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ===
async def admin_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Äî —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞."""
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await update.message.reply_text("üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–µ—Ä–≤–µ—Ä –∂–∏–≤.")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ===
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞."""
    logger.error(f"üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}", exc_info=True)

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if isinstance(update, Update) and update.effective_chat:
        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{update.effective_user.name}`:\n```\n{context.error}\n```",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")


# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ===
async def main():
    """–°–æ–∑–¥–∞—ë—Ç Application –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç polling."""
    try:
        # –î–ª—è Windows (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if sys.platform == 'win32':
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

        # –°–æ–∑–¥–∞–Ω–∏–µ Application
        application = Application.builder().token(BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", lambda u, c: handle_message(u, c)))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(CommandHandler("admin_check", admin_check))
        application.add_error_handler(error_handler)

        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")

        # –ó–∞–ø—É—Å–∫ polling
        await application.run_polling(
            drop_pending_updates=True,
            timeout=30
        )

    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º main —á–µ—Ä–µ–∑ asyncio.run() ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é (Ctrl+C)")
    except Exception as e:
        logger.critical(f"üíÄ –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
