# bot_part_7.py - –ß–∞—Å—Ç—å 7/7
# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã, –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio
import logging
import sys
import os

# === –§–∏–∫—Å –¥–ª—è Windows (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ) ===
if sys.platform == 'win32':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏–∑ bot_part_1) ===
# competitor_urls, active_monitoring, monitoring_history
# –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ bot_part_1.py

# === –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π ===
try:
    from bot_part_1 import (
        BOT_TOKEN,
        ADMIN_CHAT_ID,
        competitor_urls,
        active_monitoring,
        monitoring_history
    )
    from bot_part_2 import check_website, check_ssl, check_mobile
    from bot_part_3 import check_meta, find_broken_links, check_robots_and_sitemap
    from bot_part_4 import start_monitoring_task, add_to_history, generate_status_chart
    from bot_part_5 import create_pdf_from_data
    from bot_part_6 import handle_message, main_menu_keyboard
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    raise

# === –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ ===
async def set_competitor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∞–π—Ç-–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if update.message.chat_id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏—Ç–µ —Å–∞–π—Ç-–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç: /set_competitor –≤–∞—à-—Å–∞–π—Ç.com")
        return

    competitor = context.args[0].strip()
    if not competitor.startswith(("http://", "https://")):
        competitor = "https://" + competitor

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    competitor_urls["default"] = competitor
    await update.message.reply_text(f"‚úÖ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {competitor}")


# === –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–∞) ===
async def admin_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if update.message.chat_id != ADMIN_CHAT_ID:
        return

    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É: /admin_check –≤–∞—à-—Å–∞–π—Ç.com")
        return

    url = context.args[0]
    chat_id = update.message.chat_id

    await update.message.reply_text("üîß –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç...")

    # === –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ ===
    result = check_website(url)
    if not result["is_ok"]:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç:\n{result['error']}")
        return

    meta = check_meta(url)
    broken_links = find_broken_links(url)
    mobile = check_mobile(url)
    robots = check_robots_and_sitemap(url)

    # === –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–º ===
    comp_url = competitor_urls.get("default")
    comparison = None
    if comp_url:
        comparison = compare_with_competitor(url, comp_url)
    else:
        await update.message.reply_text("‚ö† –í–Ω–∏–º–∞–Ω–∏–µ: –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ /set_competitor")

    # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ ===
    add_to_history(chat_id, url, result["is_ok"], result.get("ssl", {}).get("valid", False))
    chart_img = generate_status_chart(monitoring_history.get(chat_id, []), url)

    # === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PDF ===
    data = {
        "url": url,
        "result": result,
        "meta": meta,
        "broken_links": broken_links,
        "mobile": mobile,
        "robots": robots,
        "comparison": comparison,
        "chart_img": chart_img
    }

    # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF ===
    pdf_path = create_pdf_from_data(chat_id, data, report_type="advanced")
    if pdf_path and os.path.exists(pdf_path):
        await update.message.reply_text("‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç—á—ë—Ç...")
        with open(pdf_path, 'rb') as pdf_file:
            await context.bot.send_document(
                chat_id=chat_id,
                document=pdf_file,
                filename="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π_–∞—É–¥–∏—Ç.pdf"
            )
        os.remove(pdf_path)
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF-–æ—Ç—á—ë—Ç–∞.")


# === –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–º ===
def compare_with_competitor(your_url, competitor_url=None):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤–∞—à —Å–∞–π—Ç —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–º.
    """
    if not competitor_url:
        competitor_url = competitor_urls.get("default")
    if not competitor_url:
        return None

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞
        your_result = check_website(your_url)
        your_meta = check_meta(your_url) if your_result["is_ok"] else {}
        your_mobile = check_mobile(your_url) if your_result["is_ok"] else {}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
        comp_result = check_website(competitor_url)
        comp_meta = check_meta(competitor_url) if comp_result["is_ok"] else {}
        comp_mobile = check_mobile(competitor_url) if comp_result["is_ok"] else {}

        def safe_get(d, key, default="N/A"):
            return d.get(key, default) if d and "error" not in d else "–û—à–∏–±–∫–∞"

        def safe_len(s):
            return len(s) if s and s != "N/A" and s != "–û—à–∏–±–∫–∞" else 0

        return {
            "your_url": your_url,
            "competitor_url": competitor_url,
            "title": {
                "your": safe_get(your_meta, "title"),
                "comp": safe_get(comp_meta, "title"),
                "your_len": safe_len(safe_get(your_meta, "title")),
                "comp_len": safe_len(safe_get(comp_meta, "title"))
            },
            "h1": {
                "your": safe_get(your_meta, "h1"),
                "comp": safe_get(comp_meta, "h1")
            },
            "viewport": {
                "your": "‚úÖ –ï—Å—Ç—å" if safe_get(your_meta, "viewport", False) else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                "comp": "‚úÖ –ï—Å—Ç—å" if safe_get(comp_meta, "viewport", False) else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            },
            "canonical": {
                "your": "‚úÖ –ï—Å—Ç—å" if safe_get(your_meta, "canonical", False) else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                "comp": "‚úÖ –ï—Å—Ç—å" if safe_get(comp_meta, "canonical", False) else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            },
            "load_time": {
                "your": safe_get(your_result, "load_time"),
                "comp": safe_get(comp_result, "load_time")
            },
            "size_kb": {
                "your": safe_get(your_result, "size_kb"),
                "comp": safe_get(comp_result, "size_kb")
            },
            "mobile_load_time": {
                "your": safe_get(your_mobile, "load_time"),
                "comp": safe_get(comp_mobile, "load_time")
            }
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–º: {e}")
        return None


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Application.builder().token(BOT_TOKEN).build()

        # === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
        async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await update.message.reply_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
                reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)
            )

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("set_competitor", set_competitor))
        app.add_handler(CommandHandler("admin_check", admin_check))

        # === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        # === –ó–∞–ø—É—Å–∫ ===
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
        await app.run_polling(drop_pending_updates=True)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


# === –ó–∞–ø—É—Å–∫ (–¥–ª—è Python 3.7+) ===
if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
