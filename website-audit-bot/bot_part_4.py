# bot_part_4.py - –ß–∞—Å—Ç—å 4/7
# –§—É–Ω–∫—Ü–∏–∏: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤

import matplotlib.pyplot as plt
import io
import base64
import asyncio
import datetime
import os

# === –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é ===
def add_to_history(chat_id, url, site_ok, ssl_ok, load_time=None, size_kb=None, error=None):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.
    –•—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π.
    """
    now = datetime.datetime.now()
    if chat_id not in monitoring_history:
        monitoring_history[chat_id] = []

    monitoring_history[chat_id].append({
        "time": now.strftime("%d.%m %H:%M"),
        "url": url,
        "site_ok": site_ok,
        "ssl_ok": ssl_ok,
        "load_time": load_time,
        "size_kb": size_kb,
        "error": error
    })

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
    if len(monitoring_history[chat_id]) > 100:
        monitoring_history[chat_id] = monitoring_history[chat_id][-100:]


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===
def generate_status_chart(history, url):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    """
    if not history:
        return None

    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        times = [entry["time"] for entry in history]
        site_status = [1 if entry["site_ok"] else 0 for entry in history]
        ssl_status = [1 if entry["ssl_ok"] else 0 for entry in history]

        # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 4))
        plt.plot(times, site_status, marker='o', label='–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', color='green')
        plt.plot(times, ssl_status, marker='x', label='SSL', color='blue')
        plt.yticks([0, 1], ['–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–†–∞–±–æ—Ç–∞–µ—Ç'])
        plt.xticks(rotation=45, fontsize=8)
        plt.title(f'–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {url}')
        plt.legend()
        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png')
        img_buffer.seek(0)
        plt.close()

        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        return base64.b64encode(img_buffer.read()).decode('utf-8')

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return None


# === –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ===
async def start_monitoring_task(context, chat_id, url, interval=300, duration=604800):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∞–π—Ç –∫–∞–∂–¥—ã–µ `interval` —Å–µ–∫—É–Ω–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ `duration` —Å–µ–∫—É–Ω–¥.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –∏ –≤ –∫–æ–Ω—Ü–µ —Å–µ—Å—Å–∏–∏.
    """
    start_time = datetime.datetime.now()
    end_time = start_time + datetime.timedelta(seconds=duration)

    await context.bot.send_message(
        chat_id=chat_id,
        text=f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è: {url}\n‚è± –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {interval // 60} –º–∏–Ω\nüìÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration // 3600} —á"
    )

    last_site_status = True
    last_ssl_status = True

    while datetime.datetime.now() < end_time:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–π—Ç
            result = check_website(url)
            ssl_result = check_ssl(url)

            site_ok = result["is_ok"]
            ssl_ok = ssl_result.get("valid", False) if ssl_result.get("error") is None else False

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            add_to_history(
                chat_id=chat_id,
                url=url,
                site_ok=site_ok,
                ssl_ok=ssl_ok,
                load_time=result.get("load_time"),
                size_kb=result.get("size_kb"),
                error=result.get("error")
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏
            if last_site_status and not site_ok:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üî¥ –°–∞–π—Ç —É–ø–∞–ª!\nüåê {url}\n‚è± {result.get('load_time', 'N/A')}\n‚ö† {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                )
            elif not last_site_status and site_ok:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üü¢ –°–∞–π—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è!\nüåê {url}"
                )

            last_site_status = site_ok
            last_ssl_status = ssl_ok

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ö† –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}"
            )

        # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(interval)

    # –í –∫–æ–Ω—Ü–µ —Å–µ—Å—Å–∏–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
    history = monitoring_history.get(chat_id, [])
    chart_img = generate_status_chart(history, url)

    report = f"üìä –ó–∞–≤–µ—Ä—à—ë–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è: {url}\n"
    if history:
        up_count = sum(1 for h in history if h["site_ok"])
        total = len(history)
        uptime = round(up_count / total * 100, 1)
        report += f"üìà –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {uptime}% ({up_count}/{total})\n"
    else:
        report += "üìà –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"

    await context.bot.send_message(chat_id=chat_id, text=report)

    if chart_img:
        temp_path = f"temp_chart_{chat_id}.png"
        with open(temp_path, "wb") as f:
            f.write(base64.b64decode(chart_img))
        await context.bot.send_photo(chat_id=chat_id, photo=open(temp_path, 'rb'))
        os.remove(temp_path)

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    if chat_id in active_monitoring:
        del active_monitoring[chat_id]
