# bot_part_4.py - –ß–∞—Å—Ç—å 4/7
# –§—É–Ω–∫—Ü–∏–∏: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤

import matplotlib.pyplot as plt
import io
import base64
import asyncio
import datetime
import os
from typing import Dict, List

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î) ===
monitoring_history = {}

# === –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é ===
def add_to_history(chat_id: int, url: str, site_ok: bool, ssl_ok: bool, load_time=None, size_kb=None, error=None):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.
    –•—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∑–∞–ø–∏—Å–µ–π (–¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏).
    """
    now = datetime.datetime.now()
    entry = {
        "time": now.strftime("%H:%M"),
        "url": url,
        "site_ok": site_ok,
        "ssl_ok": ssl_ok,
        "load_time": load_time,
        "size_kb": size_kb,
        "error": error
    }

    if chat_id not in monitoring_history:
        monitoring_history[chat_id] = []

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    monitoring_history[chat_id].append(entry)

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∑–∞–ø–∏—Å–µ–π
    if len(monitoring_history[chat_id]) > 15:
        monitoring_history[chat_id] = monitoring_history[chat_id][-15:]


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞ ===
def generate_uptime_chart(chat_id: int) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç –≥—Ä–∞—Ñ–∏–∫ uptime (—Ä–∞–±–æ—Ç–∞–µ—Ç / –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64 —Å—Ç—Ä–æ–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    if chat_id not in monitoring_history or not monitoring_history[chat_id]:
        return None

    history = monitoring_history[chat_id]
    times = [entry["time"] for entry in history]
    values = [1 if entry["site_ok"] else 0 for entry in history]

    plt.figure(figsize=(10, 4))
    plt.plot(times, values, marker='o', linestyle='-', color='#2E8B57', linewidth=2, markersize=6)
    plt.title("üìà –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞", fontsize=14, fontweight='bold')
    plt.ylabel("–°—Ç–∞—Ç—É—Å", fontsize=12)
    plt.xlabel("–í—Ä–µ–º—è", fontsize=12)
    plt.yticks([0, 1], ['–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–†–∞–±–æ—Ç–∞–µ—Ç'])
    plt.grid(True, alpha=0.3)
    plt.xticks(rotation=45)
    plt.tight_layout()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=150, bbox_inches='tight')
    plt.close()

    buf.seek(0)
    img_base64 = base64.b64encode(buf.read()).decode('utf-8')
    buf.close()

    return f"image/png;base64,{img_base64}"


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ ===
def generate_load_time_chart(chat_id: int) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç –≥—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–π—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64 —Å—Ç—Ä–æ–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    if chat_id not in monitoring_history or not monitoring_history[chat_id]:
        return None

    history = monitoring_history[chat_id]
    times = [entry["time"] for entry in history]
    load_times = [float(entry["load_time"].split()[0]) if entry["load_time"] and entry["load_time"] != "N/A" else 0 for entry in history]

    plt.figure(figsize=(10, 4))
    plt.bar(times, load_times, color='#4682B4', alpha=0.7)
    plt.title("‚è± –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–π—Ç–∞", fontsize=14, fontweight='bold')
    plt.ylabel("–°–µ–∫—É–Ω–¥—ã", fontsize=12)
    plt.xlabel("–í—Ä–µ–º—è", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=150, bbox_inches='tight')
    plt.close()

    buf.seek(0)
    img_base64 = base64.b64encode(buf.read()).decode('utf-8')
    buf.close()

    return f"image/png;base64,{img_base64}"


# === –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ===
async def start_monitoring_task(context: any, chat_id: int, url: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∞–π—Ç.
    –ï—Å–ª–∏ —Å–∞–π—Ç —É–ø–∞–ª ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    """
    last_status = None
    last_ssl_status = None

    while True:
        try:
            from bot_part_2 import check_website, check_ssl

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞
            result = check_website(url)
            site_ok = result.get("is_ok", False)
            load_time = result.get("load_time", "N/A")
            size_kb = result.get("size_kb", "N/A")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL
            ssl_result = check_ssl(url)
            ssl_ok = ssl_result.get("valid", False)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            add_to_history(chat_id, url, site_ok, ssl_ok, load_time, size_kb)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            if last_status is not None and not site_ok and last_status == True:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üî¥ –°–∞–π—Ç —É–ø–∞–ª!\n\nüåê {url}\nüïí {datetime.datetime.now().strftime('%d.%m %H:%M')}",
                    parse_mode='HTML'
                )
            elif last_status is not None and site_ok and not last_status:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üü¢ –°–∞–π—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\nüåê {url}\nüïí {datetime.datetime.now().strftime('%d.%m %H:%M')}",
                    parse_mode='HTML'
                )

            last_status = site_ok
            last_ssl_status = ssl_ok

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
            add_to_history(chat_id, url, False, False, error=str(e))

        # –ü–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç
        await asyncio.sleep(300)


logger.info("‚úÖ –ß–∞—Å—Ç—å 4/7: –§—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
