# bot_part_1.py - –ß–∞—Å—Ç—å 1/7
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏, .env, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

import os
from dotenv import load_dotenv
import logging

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

try:
    ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
except (TypeError, ValueError):
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ADMIN_CHAT_ID –≤ .env —Ñ–∞–π–ª–µ")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
# –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
competitor_urls = {"default": None}  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ /set_competitor

# –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
active_monitoring = {}

# –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞ (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
last_status = {}

# –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤)
monitoring_history = {}

# –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_subscriptions = {}

# === –ü–∞–ø–∫–∏ ===
REPORTS_DIR = "reports"
FONTS_DIR = "fonts"

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
os.makedirs(REPORTS_DIR, exist_ok=True)
os.makedirs(FONTS_DIR, exist_ok=True)

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
MONITORING_INTERVALS = {
    "5_min": 300,
    "10_min": 600,
    "30_min": 1800
}

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ ===
logger.info("‚úÖ –ß–∞—Å—Ç—å 1/7: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")
# bot_part_2.py - –ß–∞—Å—Ç—å 2/7
# –§—É–Ω–∫—Ü–∏–∏: check_website, check_ssl, check_mobile

import requests
import ssl
import socket
import time
from urllib.parse import urlparse

def check_website(url):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, —Å–∫–æ—Ä–æ—Å—Ç—å, —Ä–∞–∑–º–µ—Ä, –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∫–æ–¥–∏—Ä–æ–≤–∫—É.
    """
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º https://, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    if not url.startswith(("http://", "https://")):
        url = "https://" + url

    try:
        start_time = time.time()
        response = requests.get(
            url,
            timeout=10,
            headers={
                "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36"
            },
            allow_redirects=True
        )
        load_time = round(time.time() - start_time, 2)
        status_code = response.status_code
        is_ok = status_code == 200

        try:
            size_kb = round(len(response.content) / 1024, 2)
        except:
            size_kb = "N/A"

        content_type = response.headers.get("Content-Type", "").lower()
        charset_ok = "utf-8" in content_type

        return {
            "url": url,
            "is_ok": is_ok,
            "status": "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if is_ok else f"‚ùå –û—à–∏–±–∫–∞ {status_code}",
            "status_code": status_code,
            "load_time": f"{load_time} —Å–µ–∫",
            "size_kb": size_kb,
            "headers": dict(response.headers),
            "charset_ok": charset_ok,
            "error": None
        }

    except requests.exceptions.Timeout:
        return {
            "url": url,
            "is_ok": False,
            "status": "üî¥ –¢–∞–π–º–∞—É—Ç",
            "error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è",
            "load_time": "N/A",
            "size_kb": "N/A"
        }

    except requests.exceptions.ConnectionError:
        return {
            "url": url,
            "is_ok": False,
            "status": "üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            "load_time": "N/A",
            "size_kb": "N/A"
        }

    except Exception as e:
        return {
            "url": url,
            "is_ok": False,
            "status": "üî¥ –û—à–∏–±–∫–∞",
            "error": str(e),
            "load_time": "N/A",
            "size_kb": "N/A"
        }


def check_ssl(url):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.
    """
    if not url.startswith("https://"):
        return {"valid": False, "error": "HTTP"}

    try:
        parsed = urlparse(url)
        hostname = parsed.netloc.split(":")[0]

        context = ssl.create_default_context()
        with socket.create_connection((hostname, 443), timeout=10) as sock:
            with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                cert = ssock.getpeercert()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        from datetime import datetime
        not_after = datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z')
        is_valid = not_after > datetime.now()

        return {
            "valid": is_valid,
            "valid_to": not_after.strftime("%d.%m.%Y"),
            "error": None
        }

    except Exception as e:
        return {
            "valid": False,
            "error": str(e)
        }


def check_mobile(url):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∞–π—Ç —Å User-Agent –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    """
    if not url.startswith(("http://", "https://")):
        url = "https://" + url

    mobile_headers = {
        "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15"
    }

    try:
        start_time = time.time()
        response = requests.get(url, headers=mobile_headers, timeout=10, allow_redirects=True)
        load_time = round(time.time() - start_time, 2)

        try:
            size_kb = round(len(response.content) / 1024, 2)
        except:
            size_kb = "N/A"

        return {
            "url": url,
            "load_time": f"{load_time} —Å–µ–∫",
            "size_kb": size_kb,
            "is_ok": response.status_code == 200,
            "status_code": response.status_code,
            "error": None
        }

    except Exception as e:
        return {
            "url": url,
            "load_time": "N/A",
            "size_kb": "N/A",
            "is_ok": False,
            "error": str(e)
        }
# bot_part_3.py - –ß–∞—Å—Ç—å 3/7
# –§—É–Ω–∫—Ü–∏–∏: check_meta, find_broken_links, check_robots_and_sitemap

from bs4 import BeautifulSoup
import requests
from urllib.parse import urljoin, urlparse

def check_meta(url):
    """
    –ü–∞—Ä—Å–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ SEO-–º–µ—Ç–∞—Ç–µ–≥–∏: title, h1, description, viewport, canonical, lang, og:tags
    """
    try:
        response = requests.get(url, timeout=10, headers={
            "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36"
        })
        if response.status_code != 200:
            return {"error": f"–°—Ç–∞—Ç—É—Å {response.status_code}", "url": url}

        soup = BeautifulSoup(response.content, 'html.parser')
        html_tag = soup.find('html')

        # H1
        h1_tag = soup.find('h1')
        h1 = h1_tag.get_text(strip=True) if h1_tag else None

        # Title
        title_tag = soup.find('title')
        title = title_tag.get_text(strip=True) if title_tag else None

        # Meta Description
        meta_desc_tag = soup.find('meta', attrs={'name': 'description'})
        meta_description = meta_desc_tag.get("content") if meta_desc_tag else None

        # Viewport
        viewport = soup.find('meta', attrs={'name': 'viewport'})
        has_viewport = bool(viewport)

        # Canonical
        canonical = soup.find('link', attrs={'rel': 'canonical'})
        has_canonical = bool(canonical)

        # –Ø–∑—ã–∫ (lang)
        lang = html_tag.get('lang') if html_tag else None

        # hreflang
        hreflang = soup.find_all('link', attrs={'rel': 'alternate', 'hreflang': True})
        has_hreflang = len(hreflang) > 0

        # OG-—Ç–µ–≥–∏
        og_tags = {
            "og:title": bool(soup.find('meta', property="og:title")),
            "og:description": bool(soup.find('meta', property="og:description")),
            "og:image": bool(soup.find('meta', property="og:image")),
            "og:url": bool(soup.find('meta', property="og:url"))
        }

        return {
            "h1": h1,
            "title": title,
            "meta_description": meta_description,
            "viewport": has_viewport,
            "canonical": has_canonical,
            "lang": lang,
            "hreflang": has_hreflang,
            "og_tags": og_tags,
            "error": None
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤: {e}")
        return {"error": str(e), "url": url}


def find_broken_links(url):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –±–∏—Ç—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (404, 500 –∏ —Ç.–¥.)
    """
    try:
        response = requests.get(url, timeout=10)
        if response.status_code != 200:
            return []

        soup = BeautifulSoup(response.content, 'html.parser')
        links = soup.find_all('a', href=True)
        base_netloc = urlparse(url).netloc
        broken_links = []

        for link in links:
            full_url = urljoin(url, link['href'])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏
            if urlparse(full_url).netloc == base_netloc:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HEAD –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
                    head_response = requests.head(full_url, timeout=5, allow_redirects=True)
                    if head_response.status_code >= 400:
                        broken_links.append({
                            "url": full_url,
                            "status": head_response.status_code,
                            "text": link.get_text(strip=True)[:50] or "N/A"
                        })
                except requests.RequestException as e:
                    broken_links.append({
                        "url": full_url,
                        "status": "–û—à–∏–±–∫–∞",
                        "text": link.get_text(strip=True)[:50] or "N/A"
                    })

        return broken_links

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫: {e}")
        return []


def check_robots_and_sitemap(url):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ robots.txt –∏ sitemap.xml
    """
    results = {
        "robots_txt": "N/A",
        "sitemap_xml": "N/A",
        "issues": []
    }

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ robots.txt
        robots_url = url.rstrip("/") + "/robots.txt"
        robots_response = requests.get(robots_url, timeout=10)
        if robots_response.status_code == 200:
            if "Disallow" in robots_response.text or "Allow" in robots_response.text:
                results["robots_txt"] = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
            else:
                results["robots_txt"] = "‚ö† –ü—É—Å—Ç–æ–π"
        else:
            results["robots_txt"] = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        results["robots_txt"] = "‚ùå –û—à–∏–±–∫–∞"
        results["issues"].append(f"robots.txt: {str(e)}")

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ sitemap.xml
        sitemap_url = url.rstrip("/") + "/sitemap.xml"
        sitemap_response = requests.get(sitemap_url, timeout=10)
        if sitemap_response.status_code == 200 and "<urlset" in sitemap_response.text.lower():
            results["sitemap_xml"] = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
        else:
            results["sitemap_xml"] = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        results["sitemap_xml"] = "‚ùå –û—à–∏–±–∫–∞"
        results["issues"].append(f"sitemap.xml: {str(e)}")

    return results
# bot_part_4.py - –ß–∞—Å—Ç—å 4/7
# –§—É–Ω–∫—Ü–∏–∏: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤

import matplotlib.pyplot as plt
import io
import base64
import asyncio
import datetime
import os

# === –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é ===
def add_to_history(chat_id, url, site_ok, ssl_ok, load_time=None, size_kb=None, error=None):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.
    –•—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π.
    """
    now = datetime.datetime.now()
    if chat_id not in monitoring_history:
        monitoring_history[chat_id] = []

    monitoring_history[chat_id].append({
        "time": now.strftime("%d.%m %H:%M"),
        "url": url,
        "site_ok": site_ok,
        "ssl_ok": ssl_ok,
        "load_time": load_time,
        "size_kb": size_kb,
        "error": error
    })

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
    if len(monitoring_history[chat_id]) > 100:
        monitoring_history[chat_id] = monitoring_history[chat_id][-100:]


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===
def generate_status_chart(history, url):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    """
    if not history:
        return None

    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        times = [entry["time"] for entry in history]
        site_status = [1 if entry["site_ok"] else 0 for entry in history]
        ssl_status = [1 if entry["ssl_ok"] else 0 for entry in history]

        # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 4))
        plt.plot(times, site_status, marker='o', label='–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', color='green')
        plt.plot(times, ssl_status, marker='x', label='SSL', color='blue')
        plt.yticks([0, 1], ['–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–†–∞–±–æ—Ç–∞–µ—Ç'])
        plt.xticks(rotation=45, fontsize=8)
        plt.title(f'–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {url}')
        plt.legend()
        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png')
        img_buffer.seek(0)
        plt.close()

        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        return base64.b64encode(img_buffer.read()).decode('utf-8')

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return None


# === –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ===
async def start_monitoring_task(context, chat_id, url, interval=300, duration=604800):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∞–π—Ç –∫–∞–∂–¥—ã–µ `interval` —Å–µ–∫—É–Ω–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ `duration` —Å–µ–∫—É–Ω–¥.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –∏ –≤ –∫–æ–Ω—Ü–µ —Å–µ—Å—Å–∏–∏.
    """
    start_time = datetime.datetime.now()
    end_time = start_time + datetime.timedelta(seconds=duration)

    await context.bot.send_message(
        chat_id=chat_id,
        text=f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è: {url}\n‚è± –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {interval // 60} –º–∏–Ω\nüìÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration // 3600} —á"
    )

    last_site_status = True
    last_ssl_status = True

    while datetime.datetime.now() < end_time:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–π—Ç
            result = check_website(url)
            ssl_result = check_ssl(url)

            site_ok = result["is_ok"]
            ssl_ok = ssl_result.get("valid", False) if ssl_result.get("error") is None else False

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            add_to_history(
                chat_id=chat_id,
                url=url,
                site_ok=site_ok,
                ssl_ok=ssl_ok,
                load_time=result.get("load_time"),
                size_kb=result.get("size_kb"),
                error=result.get("error")
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏
            if last_site_status and not site_ok:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üî¥ –°–∞–π—Ç —É–ø–∞–ª!\nüåê {url}\n‚è± {result.get('load_time', 'N/A')}\n‚ö† {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                )
            elif not last_site_status and site_ok:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üü¢ –°–∞–π—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è!\nüåê {url}"
                )

            last_site_status = site_ok
            last_ssl_status = ssl_ok

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ö† –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}"
            )

        # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(interval)

    # –í –∫–æ–Ω—Ü–µ —Å–µ—Å—Å–∏–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
    history = monitoring_history.get(chat_id, [])
    chart_img = generate_status_chart(history, url)

    report = f"üìä –ó–∞–≤–µ—Ä—à—ë–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è: {url}\n"
    if history:
        up_count = sum(1 for h in history if h["site_ok"])
        total = len(history)
        uptime = round(up_count / total * 100, 1)
        report += f"üìà –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {uptime}% ({up_count}/{total})\n"
    else:
        report += "üìà –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"

    await context.bot.send_message(chat_id=chat_id, text=report)

    if chart_img:
        temp_path = f"temp_chart_{chat_id}.png"
        with open(temp_path, "wb") as f:
            f.write(base64.b64decode(chart_img))
        await context.bot.send_photo(chat_id=chat_id, photo=open(temp_path, 'rb'))
        os.remove(temp_path)

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    if chat_id in active_monitoring:
        del active_monitoring[chat_id]
# bot_part_5.py - –ß–∞—Å—Ç—å 5/7
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á—ë—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é fpdf2

from fpdf import FPDF
import os
import base64
import datetime

# –ü—É—Ç–∏ –∫ —à—Ä–∏—Ñ—Ç–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º Helvetica
ARIAL_REGULAR = "fonts/arial.ttf"
ARIAL_BOLD = "fonts/arialbd.ttf"

def create_pdf_from_data(chat_id, data, report_type="basic"):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-–æ—Ç—á—ë—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö.
    report_type: "basic", "advanced"
    """
    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)

    # === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Arial (–µ—Å–ª–∏ —Ñ–∞–π–ª—ã –µ—Å—Ç—å) ===
    use_arial = False
    if os.path.exists(ARIAL_REGULAR) and os.path.exists(ARIAL_BOLD):
        try:
            pdf.add_font("Arial", "", ARIAL_REGULAR)
            pdf.add_font("Arial", "B", ARIAL_BOLD)
            pdf.set_font("Arial", size=12)
            use_arial = True
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Arial: {e}")
            pdf.set_font("Helvetica", size=12)
    else:
        pdf.set_font("Helvetica", size=12)

    # === –ó–∞–≥–æ–ª–æ–≤–æ–∫ ===
    pdf.set_font("Arial", "B", 16) if use_arial else pdf.set_font("Helvetica", "B", 16)
    pdf.set_text_color(0, 0, 0)
    pdf.cell(0, 10, "–û—Ç—á—ë—Ç –ø–æ —Å–∞–π—Ç—É", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT, align='C')
    pdf.ln(5)

    # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    pdf.set_font("Arial", size=12) if use_arial else pdf.set_font("Helvetica", size=12)
    pdf.set_text_color(60, 60, 60)
    pdf.cell(0, 8, f"–°–∞–π—Ç: {data['url']}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
    pdf.cell(0, 8, f"–î–∞—Ç–∞: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
    pdf.ln(10)

    # === –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ ===
    result = data.get("result", {})
    pdf.set_font("Arial", "B", 14) if use_arial else pdf.set_font("Helvetica", "B", 14)
    pdf.set_text_color(0, 0, 0)
    pdf.cell(0, 10, "üìä –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
    pdf.set_font("Arial", size=12) if use_arial else pdf.set_font("Helvetica", size=12)
    pdf.set_text_color(60, 60, 60)
    pdf.cell(0, 8, f"–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {result.get('status', 'N/A')}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)

    # –°–∫–æ—Ä–æ—Å—Ç—å
    load_time_str = result.get('load_time', 'N/A')
    try:
        load_time = float(load_time_str.split()[0])
        if load_time < 1.5:
            perf = "‚úÖ –û—Ç–ª–∏—á–Ω–æ"
        elif load_time < 3.0:
            perf = "üü° –°—Ä–µ–¥–Ω–µ"
        else:
            perf = "üî¥ –ü–ª–æ—Ö–æ"
    except:
        load_time = 5.0
        perf = "N/A"
    pdf.cell(0, 8, f"–°–∫–æ—Ä–æ—Å—Ç—å: {load_time_str}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
    pdf.cell(0, 8, f"–û—Ü–µ–Ω–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏: {perf}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)

    # SSL
    ssl_valid = result.get('ssl', {}).get('valid', False)
    if ssl_valid:
        pdf.set_text_color(0, 128, 0)
        pdf.cell(0, 8, "SSL: ‚úÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
    else:
        pdf.set_text_color(200, 0, 0)
        pdf.cell(0, 8, "SSL: ‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
    pdf.set_text_color(60, 60, 60)

    if result.get('size_kb'):
        pdf.cell(0, 8, f"–†–∞–∑–º–µ—Ä: {result['size_kb']} KB", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
    pdf.ln(8)

    # === SEO-–∞–Ω–∞–ª–∏–∑ ===
    meta = data.get("meta", {})
    if meta and "error" not in meta:
        pdf.set_font("Arial", "B", 14) if use_arial else pdf.set_font("Helvetica", "B", 14)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(0, 10, "üìå SEO-–∞–Ω–∞–ª–∏–∑", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_font("Arial", size=12) if use_arial else pdf.set_font("Helvetica", size=12)
        pdf.set_text_color(60, 60, 60)

        # H1
        pdf.cell(0, 8, f"H1: {meta.get('h1', 'N/A')}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)

        # Title
        pdf.cell(0, 8, f"Title: {meta.get('title', 'N/A')}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)

        # Meta Description
        desc = meta.get('meta_description') or 'N/A'
        if desc == 'N/A':
            pdf.set_text_color(200, 0, 0)
            pdf.cell(0, 8, "Meta Description: ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        else:
            desc_len = len(desc)
            if desc_len < 90:
                pdf.set_text_color(200, 100, 0)
                pdf.cell(0, 8, f"Meta Description: ‚ö† –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({desc_len} —Å–∏–º–≤.)", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
            elif desc_len > 160:
                pdf.set_text_color(200, 100, 0)
                pdf.cell(0, 8, f"Meta Description: ‚ö† –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({desc_len} —Å–∏–º–≤.)", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
            else:
                pdf.set_text_color(0, 128, 0)
                pdf.cell(0, 8, f"Meta Description: ‚úÖ –û—Ç–ª–∏—á–Ω–æ ({desc_len} —Å–∏–º–≤.)", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_text_color(60, 60, 60)

        # Viewport
        if meta.get('viewport'):
            pdf.set_text_color(0, 128, 0)
            pdf.cell(0, 8, "Viewport: ‚úÖ –ï—Å—Ç—å", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        else:
            pdf.set_text_color(200, 0, 0)
            pdf.cell(0, 8, "Viewport: ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_text_color(60, 60, 60)

        # Canonical
        if meta.get('canonical'):
            pdf.set_text_color(0, 128, 0)
            pdf.cell(0, 8, "Canonical: ‚úÖ –ï—Å—Ç—å", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        else:
            pdf.set_text_color(200, 0, 0)
            pdf.cell(0, 8, "Canonical: ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_text_color(60, 60, 60)

        # –Ø–∑—ã–∫ (lang)
        lang = meta.get('lang', 'N/A')
        pdf.cell(0, 8, f"–Ø–∑—ã–∫ (lang): {lang}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)

        # –ö–æ–¥–∏—Ä–æ–≤–∫–∞ (–∏–∑ headers)
        charset_ok = result.get("charset_ok", False)
        if charset_ok:
            pdf.set_text_color(0, 128, 0)
            pdf.cell(0, 8, "–ö–æ–¥–∏—Ä–æ–≤–∫–∞: ‚úÖ UTF-8", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        else:
            pdf.set_text_color(200, 0, 0)
            pdf.cell(0, 8, "–ö–æ–¥–∏—Ä–æ–≤–∫–∞: ‚ùå –ù–µ UTF-8", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_text_color(60, 60, 60)

        pdf.ln(8)

    # === robots.txt –∏ sitemap.xml ===
    robots = data.get("robots", {})
    if robots:
        pdf.set_font("Arial", "B", 14) if use_arial else pdf.set_font("Helvetica", "B", 14)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(0, 10, "üìÑ robots.txt –∏ sitemap.xml", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_font("Arial", size=12) if use_arial else pdf.set_font("Helvetica", size=12)
        pdf.set_text_color(60, 60, 60)

        # robots.txt
        robots_status = robots.get('robots_txt', 'N/A')
        if "–î–æ—Å—Ç—É–ø–µ–Ω" in robots_status:
            pdf.set_text_color(0, 128, 0)
            pdf.cell(0, 8, "robots.txt: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        elif "–ó–∞–ø—Ä–µ—â–∞–µ—Ç" in robots_status:
            pdf.set_text_color(200, 100, 0)
            pdf.cell(0, 8, "robots.txt: ‚ö† –ó–∞–ø—Ä–µ—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        else:
            pdf.set_text_color(200, 0, 0)
            pdf.cell(0, 8, f"robots.txt: ‚ùå {robots_status}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)

        # sitemap.xml
        sitemap_status = robots.get('sitemap_xml', 'N/A')
        if "–î–æ—Å—Ç—É–ø–µ–Ω" in sitemap_status:
            pdf.set_text_color(0, 128, 0)
            pdf.cell(0, 8, "sitemap.xml: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        else:
            pdf.set_text_color(200, 0, 0)
            pdf.cell(0, 8, f"sitemap.xml: ‚ùå {sitemap_status}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)

        pdf.set_text_color(60, 60, 60)
        pdf.ln(8)

    # === –ë–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏ ===
    broken_links = data.get("broken_links", [])
    if broken_links:
        pdf.set_font("Arial", "B", 14) if use_arial else pdf.set_font("Helvetica", "B", 14)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(0, 10, "üîó –ë–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏ (404)", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_font("Arial", size=12) if use_arial else pdf.set_font("Helvetica", size=12)
        pdf.set_text_color(200, 0, 0)
        for link in broken_links[:10]:
            pdf.cell(0, 8, f"‚ùå {link['url']} (–∫–æ–¥: {link['status']})", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        if len(broken_links) > 10:
            pdf.cell(0, 8, f"... –∏ –µ—â—ë {len(broken_links) - 10}", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.ln(8)
    else:
        pdf.set_font("Arial", "B", 14) if use_arial else pdf.set_font("Helvetica", "B", 14)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(0, 10, "‚úÖ –ë–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_font("Arial", size=12) if use_arial else pdf.set_font("Helvetica", size=12)
        pdf.set_text_color(0, 128, 0)
        pdf.cell(0, 8, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.ln(8)

    # === –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===
    if data.get("chart_img"):
        pdf.set_font("Arial", "B", 14) if use_arial else pdf.set_font("Helvetica", "B", 14)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(0, 10, "üìà –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        img_data = base64.b64decode(data["chart_img"])
        temp_img_path = f"temp_chart_{chat_id}.png"
        with open(temp_img_path, "wb") as f:
            f.write(img_data)
        pdf.image(temp_img_path, x=10, w=180)
        os.remove(temp_img_path)
        pdf.ln(10)

    # === –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–º ===
    comparison = data.get("comparison", {})
    if comparison and isinstance(comparison, dict):
        pdf.set_font("Arial", "B", 14) if use_arial else pdf.set_font("Helvetica", "B", 14)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(0, 10, "üÜö –°–†–ê–í–ù–ï–ù–ò–ï –° –ö–û–ù–ö–£–†–ï–ù–¢–û–ú", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.ln(2)

        col_width = 60
        pdf.set_font("Arial", "B", 12) if use_arial else pdf.set_font("Helvetica", "B", 12)
        pdf.cell(col_width, 8, "–ü–∞—Ä–∞–º–µ—Ç—Ä", border=1, align='C')
        pdf.cell(col_width, 8, "–í–∞—à —Å–∞–π—Ç", border=1, align='C')
        pdf.cell(col_width, 8, "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç", border=1, align='C')
        pdf.ln(8)

        pdf.set_font("Arial", size=12) if use_arial else pdf.set_font("Helvetica", size=12)

        # Title
        pdf.cell(col_width, 8, "Title", border=1)
        pdf.cell(col_width, 8, str(comparison['title']['your'])[:50], border=1)
        pdf.cell(col_width, 8, str(comparison['title']['comp'])[:50], border=1)
        pdf.ln(8)

        # –î–ª–∏–Ω–∞ Title
        pdf.cell(col_width, 8, "–î–ª–∏–Ω–∞ Title", border=1)
        pdf.cell(col_width, 8, str(comparison['title']['your_len']), border=1)
        pdf.cell(col_width, 8, str(comparison['title']['comp_len']), border=1)
        pdf.ln(8)

        # H1
        pdf.cell(col_width, 8, "H1", border=1)
        pdf.cell(col_width, 8, str(comparison['h1']['your'])[:50], border=1)
        pdf.cell(col_width, 8, str(comparison['h1']['comp'])[:50], border=1)
        pdf.ln(8)

        # Viewport
        pdf.cell(col_width, 8, "Viewport", border=1)
        pdf.cell(col_width, 8, comparison['viewport']['your'], border=1)
        pdf.cell(col_width, 8, comparison['viewport']['comp'], border=1)
        pdf.ln(8)

        # Canonical
        pdf.cell(col_width, 8, "Canonical", border=1)
        pdf.cell(col_width, 8, comparison['canonical']['your'], border=1)
        pdf.cell(col_width, 8, comparison['canonical']['comp'], border=1)
        pdf.ln(8)

        # –°–∫–æ—Ä–æ—Å—Ç—å
        pdf.cell(col_width, 8, "–°–∫–æ—Ä–æ—Å—Ç—å", border=1)
        pdf.cell(col_width, 8, str(comparison['load_time']['your']), border=1)
        pdf.cell(col_width, 8, str(comparison['load_time']['comp']), border=1)
        pdf.ln(8)

        # –†–∞–∑–º–µ—Ä
        pdf.cell(col_width, 8, "–†–∞–∑–º–µ—Ä", border=1)
        pdf.cell(col_width, 8, str(comparison['size_kb']['your']), border=1)
        pdf.cell(col_width, 8, str(comparison['size_kb']['comp']), border=1)
        pdf.ln(8)

        pdf.ln(5)
    else:
        pdf.set_font("Arial", "B", 14) if use_arial else pdf.set_font("Helvetica", "B", 14)
        pdf.set_text_color(200, 100, 0)
        pdf.cell(0, 10, "‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_text_color(60, 60, 60)
        pdf.cell(0, 8, "–í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —Å–∞–π—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.ln(8)

    # === –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ) ===
    if report_type == "advanced":
        pdf.set_font("Arial", "B", 14) if use_arial else pdf.set_font("Helvetica", "B", 14)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(0, 10, "üë®‚Äçüíª –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞", new_x=pdf.XPos.LMARGIN, new_y=pdf.YPos.NEXT)
        pdf.set_font("Arial", size=12) if use_arial else pdf.set_font("Helvetica", size=12)
        pdf.set_text_color(60, 60, 60)

        expert_comment = f"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ä–∏—Å üëã, —è –∫–∞–∫ —Ä–∞–∑ —Å–º–æ—Ç—Ä–µ–ª —Å–∞–π—Ç {data['url']} ‚Äî –∏ –≤–æ—Ç —á—Ç–æ —è –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É –¥—É–º–∞—é:\n\n"

        if load_time < 1.5:
            expert_comment += f"‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –°–∞–π—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∑–∞ {load_time} —Å–µ–∫ ‚Äî —ç—Ç–æ –æ—Ç–ª–∏—á–Ω–æ!\n"
        elif load_time < 3.0:
            expert_comment += f"üìä –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å ‚Äî {load_time} —Å–µ–∫. –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏.\n"
        else:
            expert_comment += f"üìâ –°–∞–π—Ç –≥—Ä—É–∑–∏—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ ‚Äî {load_time} —Å–µ–∫. –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ.\n"

        if not meta.get('viewport'):
            expert_comment += "‚ùå –ù–µ –∑–∞–¥–∞–Ω viewport ‚Äî —Å–∞–π—Ç –º–æ–∂–µ—Ç –ø–ª–æ—Ö–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö.\n"
        if not meta.get('canonical'):
            expert_comment += "‚ùå –ù–µ—Ç canonical ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—É–±–ª—è–º–∏.\n"
        if not meta.get('meta_description') or len(meta.get('meta_description', '')) < 90:
            expert_comment += "‚ö† Meta description —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ‚Äî –¥–æ–±–∞–≤—å—Ç–µ, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å CTR –≤ –ø–æ–∏—Å–∫–µ.\n"

        ssl_info = data['result'].get("ssl", {})
        if not ssl_info.get("valid", False) and data["url"].startswith("https://"):
            expert_comment += "üîê SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω ‚Äî —ç—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ.\n"
        elif data["url"].startswith("http://"):
            expert_comment += "üîí –°–∞–π—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS ‚Äî —ç—Ç–æ —É—è–∑–≤–∏–º–æ.\n"
        else:
            expert_comment += "‚úÖ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ.\n"

        expert_comment += (
            "\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —ç—Ç–∏—Ö –ø—Ä–æ–±–ª–µ–º. "
            "–ü–∏—à–∏—Ç–µ –º–Ω–µ: @ivanovboris550 ‚Äî —Å–¥–µ–ª–∞—é –≤—Å—ë –∑–∞ –≤–∞—Å."
        )

        pdf.multi_cell(0, 6, expert_comment)
        pdf.ln(5)

    # === –ü–æ–¥–≤–∞–ª ===
    pdf.set_font("Arial", size=10) if use_arial else pdf.set_font("Helvetica", size=10)
    pdf.set_text_color(100, 100, 100)
    pdf.cell(0, 8, "–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–æ–≤ ‚Ä¢ Website Audit Bot", align='C')

    # === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PDF ===
    pdf_path = f"reports/report_{chat_id}_{int(datetime.datetime.now().timestamp())}.pdf"
    os.makedirs("reports", exist_ok=True)
    try:
        pdf.output(pdf_path)
        return pdf_path
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
        return None
# bot_part_6.py - –ß–∞—Å—Ç—å 6/7
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ–ø–ª–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –ÆMoney)

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, MessageHandler, filters
from urllib.parse import urlparse

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
main_menu_keyboard = [
    ["üîç –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"],
    ["üí≥ –ë–∞–∑–æ–≤—ã–π –∞—É–¥–∏—Ç ‚Äî 300 —Ä—É–±"],
    ["üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞—É–¥–∏—Ç ‚Äî 700 —Ä—É–±"],
    ["üìå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ‚Äî 1000 —Ä—É–±/–º–µ—Å"],
    ["üìò –û –±–æ—Ç–µ", "‚≠ê –û—Ç–∑—ã–≤—ã"]
]

# –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ –ÆMoney
payment_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆMoney", url="https://yoomoney.ru/to/4100119272378518")]
])

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ URL ===
def is_valid_url(url):
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except:
        return False

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user = update.effective_user
    chat_id = user.id

    # === –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é ===
    if text == "üìò –û –±–æ—Ç–µ":
        await about(update, context)
        return
    elif text == "‚ùì FAQ":
        await faq(update, context)
        return
    elif text == "‚≠ê –û—Ç–∑—ã–≤—ã":
        await reviews(update, context)
        return

    # === –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ===
    elif text == "üîç –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:"
        )
        context.user_data['check_type'] = 'free_check'

    # === –ë–∞–∑–æ–≤—ã–π –∞—É–¥–∏—Ç ===
    elif text == "üí≥ –ë–∞–∑–æ–≤—ã–π –∞—É–¥–∏—Ç ‚Äî 300 —Ä—É–±":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞—É–¥–∏—Ç–∞:"
        )
        context.user_data['check_type'] = 'basic'

    # === –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞—É–¥–∏—Ç ===
    elif text == "üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞—É–¥–∏—Ç ‚Äî 700 —Ä—É–±":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞—É–¥–∏—Ç–∞:"
        )
        context.user_data['check_type'] = 'advanced'

    # === –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ===
    elif text == "üìå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ‚Äî 1000 —Ä—É–±/–º–µ—Å":
        await monitoring_info(update, context)

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ ===
    elif context.user_data.get('check_type') in ['free_check', 'basic', 'advanced']:
        if not is_valid_url(text):
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –ü—Ä–∏–º–µ—Ä: https://example.com")
            return

        url = text
        check_type = context.user_data['check_type']

        # === –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ===
        if check_type == 'free_check':
            result = check_website(url)
            ssl_result = check_ssl(url)
            message = (
                f"üìä <b>–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞</b>\n"
                f"üîπ <b>–°–∞–π—Ç:</b> {result['url']}\n"
                f"‚úÖ <b>–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:</b> {result['status']}\n"
                f"‚è± <b>–°–∫–æ—Ä–æ—Å—Ç—å:</b> {result.get('load_time', 'N/A')}\n"
                f"üîê <b>SSL:</b> {'‚úÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω' if ssl_result.get('valid') else '‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω'}"
            )
            await update.message.reply_text(message, parse_mode='HTML')

        # === –ë–∞–∑–æ–≤—ã–π –∞—É–¥–∏—Ç ===
        elif check_type == 'basic':
            payment_info = (
                "üìå <b>–ë–∞–∑–æ–≤—ã–π –∞—É–¥–∏—Ç ‚Äî 300 —Ä—É–±</b>\n"
                "‚úÖ –í–∫–ª—é—á–∞–µ—Ç:\n"
                "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, —Å–∫–æ—Ä–æ—Å—Ç—å, SSL\n"
                "‚Ä¢ –ù–∞–ª–∏—á–∏–µ H1, title, meta description\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ viewport, canonical\n"
                "‚Ä¢ –ë–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏\n\n"

                "üí≥ <b>–û–ø–ª–∞—Ç–∞:</b>\n"
                "‚Ä¢ –ÆMoney: <code>4100 1192 7237 8518</code>\n\n"

                "üì§ <b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:</b>\n"
                "1. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞\n"
                "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞ email: <code>Iv.vboris@yandex.ru</code>\n"
                "3. –£–∫–∞–∂–∏—Ç–µ:\n"
                " ‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç\n"
                " ‚Ä¢ –ö—É–¥–∞ –≤—ã—Å–ª–∞—Ç—å –æ—Ç—á—ë—Ç (Telegram, email)\n\n"
                "üí¨ –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞."
            )
            await update.message.reply_text(payment_info, parse_mode='HTML', reply_markup=payment_keyboard)

        # === –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞—É–¥–∏—Ç ===
        elif check_type == 'advanced':
            payment_info = (
                "üöÄ <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞—É–¥–∏—Ç ‚Äî 700 —Ä—É–±</b>\n"
                "‚úÖ –í–∫–ª—é—á–∞–µ—Ç –≤—Å—ë –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ +:\n"
                "‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–º\n"
                "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
                "‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞\n\n"

                "üí≥ <b>–û–ø–ª–∞—Ç–∞:</b>\n"
                "‚Ä¢ –ÆMoney: <code>4100 1192 7237 8518</code>\n\n"

                "üì§ <b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:</b>\n"
                "1. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞\n"
                "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞ email: <code>Iv.vboris@yandex.ru</code>\n"
                "3. –£–∫–∞–∂–∏—Ç–µ:\n"
                " ‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç\n"
                " ‚Ä¢ –ö—É–¥–∞ –≤—ã—Å–ª–∞—Ç—å –æ—Ç—á—ë—Ç (Telegram, email)\n\n"
                "üí¨ –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞."
            )
            await update.message.reply_text(payment_info, parse_mode='HTML', reply_markup=payment_keyboard)

        # === –û—á–∏—Å—Ç–∫–∞ ===
        context.user_data.clear()

    # === –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ===
    else:
        await update.message.reply_text(
            "üî¥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)
        )


# === –ö–æ–º–∞–Ω–¥–∞ /about ===
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        "ü§ñ <b>Website Audit Bot</b>\n\n"
        "–ü—Ä–æ–≤–µ—Ä—è—é —Å–∞–π—Ç—ã –Ω–∞ SEO, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å.\n\n"
        "üîπ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞</b> ‚Äî –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏\n"
        "üîπ <b>–ë–∞–∑–æ–≤—ã–π –∞—É–¥–∏—Ç</b> ‚Äî –ø–æ–ª–Ω—ã–π SEO-–∞–Ω–∞–ª–∏–∑\n"
        "üîπ <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞—É–¥–∏—Ç</b> ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–º + —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n"
        "üîπ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b> ‚Äî 24/7 –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å–∞–π—Ç–æ–º\n\n"
        "–°–æ–∑–¥–∞–Ω–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–∞–π—Ç–æ–≤, –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–≤, SEO-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤."
    )
    await update.message.reply_text(message, parse_mode='HTML')


# === –ö–æ–º–∞–Ω–¥–∞ /faq ===
async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        "‚ùì <b>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
        "<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç–∞?</b>\n"
        "–í—ã –ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ –ÆMoney (4100 1192 7237 8518), –ø—Ä–∏—Å—ã–ª–∞–µ—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –Ω–∞ email ‚Äî —è –∑–∞–ø—É—Å–∫–∞—é –∞—É–¥–∏—Ç.\n\n"
        "<b>–ö–æ–≥–¥–∞ –ø—Ä–∏—à–ª—é—Ç –æ—Ç—á—ë—Ç?</b>\n"
        "–í —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n\n"
        "<b>–ú–æ–∂–Ω–æ –ª–∏ —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏?</b>\n"
        "–°–µ–π—á–∞—Å ‚Äî —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º. –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—É–¥–∏—Ç–æ–≤.\n\n"
        "<b>–†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ 24/7?</b>\n"
        "–î–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏."
    )
    await update.message.reply_text(message, parse_mode='HTML')


# === –ö–æ–º–∞–Ω–¥–∞ /reviews ===
async def reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        "‚≠ê <b>–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
        "<i>¬´–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–º –ø–æ–∫–∞–∑–∞–ª–æ, —á—Ç–æ —É –º–µ–Ω—è —Ö—É–∂–µ title –∏ —Å–∫–æ—Ä–æ—Å—Ç—å. –ò—Å–ø—Ä–∞–≤–∏–ª ‚Äî —Ç—Ä–∞—Ñ–∏–∫ –≤—ã—Ä–æ—Å –Ω–∞ 30%¬ª</i>\n"
        "‚Äî @client3\n\n"
        "<i>¬´–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø–∞—Å –º–æ–π –±–∏–∑–Ω–µ—Å. –£–≤–µ–¥–æ–º–∏–ª–∏ –æ –ø–∞–¥–µ–Ω–∏–∏ —Å–∞–π—Ç–∞ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞¬ª</i>\n"
        "‚Äî @client2\n\n"
        "<i>¬´–ü–æ–ª—å–∑—É—é—Å—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º 6 –º–µ—Å—è—Ü–µ–≤. –ù–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—è –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª. –£–¥–æ–±–Ω–æ, –Ω–∞–¥—ë–∂–Ω–æ¬ª</i>\n"
        "‚Äî @client4\n\n"
        "üí¨ –£ –≤–∞—Å –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞ Iv.vboris@yandex.ru ‚Äî –¥–æ–±–∞–≤–ª—é –≤ –æ—Ç–∑—ã–≤—ã!"
    )
    await update.message.reply_text(message, parse_mode='HTML')


# === –ö–æ–º–∞–Ω–¥–∞ /monitoring_info ===
async def monitoring_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        "üìå <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ‚Äî 1000 —Ä—É–±/–º–µ—Å</b>\n"
        "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n"
        "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏\n"
        "‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã\n"
        "‚úÖ –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
        "üí≥ <b>–û–ø–ª–∞—Ç–∞:</b>\n"
        "‚Ä¢ –ÆMoney: <code>4100 1192 7237 8518</code>\n\n"
        "üì§ <b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:</b>\n"
        "1. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –Ω–∞ email: <code>Iv.vboris@yandex.ru</code>\n"
        "2. –£–∫–∞–∂–∏—Ç–µ:\n"
        " ‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç\n"
        " ‚Ä¢ –ñ–µ–ª–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (5/10/30 –º–∏–Ω)\n\n"
        "üí¨ –Ø –≤–∫–ª—é—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞."
    )
    await update.message.reply_text(message, parse_mode='HTML', reply_markup=payment_keyboard)
# bot_part_7.py - –ß–∞—Å—Ç—å 7/7
# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã, –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio
import logging
import sys
import os

# === –§–∏–∫—Å –¥–ª—è Windows (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ) ===
if sys.platform == 'win32':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏–∑ bot_part_1) ===
# competitor_urls, active_monitoring, monitoring_history, user_subscriptions
# –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ bot_part_1.py

# === –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π ===
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ
from bot_part_1 import competitor_urls, active_monitoring, monitoring_history
from bot_part_2 import check_website, check_ssl, check_mobile
from bot_part_3 import check_meta, find_broken_links, check_robots_and_sitemap
from bot_part_4 import start_monitoring_task, add_to_history, generate_status_chart
from bot_part_5 import create_pdf_from_data
from bot_part_6 import handle_message

# === –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ ===
async def set_competitor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∞–π—Ç-–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if update.message.chat_id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏—Ç–µ —Å–∞–π—Ç-–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç: /set_competitor –≤–∞—à-—Å–∞–π—Ç.com")
        return

    competitor = context.args[0].strip()
    if not competitor.startswith(("http://", "https://")):
        competitor = "https://" + competitor

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    competitor_urls["default"] = competitor
    await update.message.reply_text(f"‚úÖ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {competitor}")


# === –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–∞) ===
async def admin_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if update.message.chat_id != ADMIN_CHAT_ID:
        return

    if not context.args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É: /admin_check –≤–∞—à-—Å–∞–π—Ç.com")
        return

    url = context.args[0]
    chat_id = update.message.chat_id

    await update.message.reply_text("üîß –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç...")

    # === –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ ===
    result = check_website(url)
    if not result["is_ok"]:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç:\n{result['error']}")
        return

    meta = check_meta(url)
    broken_links = find_broken_links(url)
    mobile = check_mobile(url)
    robots = check_robots_and_sitemap(url)

    # === –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ) ===
    comp_url = competitor_urls.get("default")
    comparison = None
    if comp_url:
        comparison = compare_with_competitor(url, comp_url)
    else:
        await update.message.reply_text("‚ö† –í–Ω–∏–º–∞–Ω–∏–µ: –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ /set_competitor")

    # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ ===
    add_to_history(chat_id, url, result["is_ok"], result.get("ssl", {}).get("valid", False))
    chart_img = generate_status_chart(monitoring_history.get(chat_id, []), url)

    # === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PDF ===
    data = {
        "url": url,
        "result": result,
        "meta": meta,
        "broken_links": broken_links,
        "mobile": mobile,
        "robots": robots,
        "comparison": comparison,
        "chart_img": chart_img
    }

    # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF ===
    pdf_path = create_pdf_from_data(chat_id, data, report_type="advanced")
    if pdf_path and os.path.exists(pdf_path):
        await update.message.reply_text("‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç—á—ë—Ç...")
        with open(pdf_path, 'rb') as pdf_file:
            await context.bot.send_document(
                chat_id=chat_id,
                document=pdf_file,
                filename="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π_–∞—É–¥–∏—Ç.pdf"
            )
        os.remove(pdf_path)
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF-–æ—Ç—á—ë—Ç–∞.")


# === –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–º (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ bot_part_7 –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ) ===
def compare_with_competitor(your_url, competitor_url=None):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤–∞—à —Å–∞–π—Ç —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–º.
    """
    if not competitor_url:
        competitor_url = competitor_urls.get("default")
    if not competitor_url:
        return None

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞
        your_result = check_website(your_url)
        your_meta = check_meta(your_url) if your_result["is_ok"] else {}
        your_mobile = check_mobile(your_url) if your_result["is_ok"] else {}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
        comp_result = check_website(competitor_url)
        comp_meta = check_meta(competitor_url) if comp_result["is_ok"] else {}
        comp_mobile = check_mobile(competitor_url) if comp_result["is_ok"] else {}

        def safe_get(d, key, default="N/A"):
            return d.get(key, default) if d and "error" not in d else "–û—à–∏–±–∫–∞"

        def safe_len(s):
            return len(s) if s and s != "N/A" and s != "–û—à–∏–±–∫–∞" else 0

        return {
            "your_url": your_url,
            "competitor_url": competitor_url,
            "title": {
                "your": safe_get(your_meta, "title"),
                "comp": safe_get(comp_meta, "title"),
                "your_len": safe_len(safe_get(your_meta, "title")),
                "comp_len": safe_len(safe_get(comp_meta, "title"))
            },
            "h1": {
                "your": safe_get(your_meta, "h1"),
                "comp": safe_get(comp_meta, "h1")
            },
            "viewport": {
                "your": "‚úÖ –ï—Å—Ç—å" if safe_get(your_meta, "viewport", False) else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                "comp": "‚úÖ –ï—Å—Ç—å" if safe_get(comp_meta, "viewport", False) else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            },
            "canonical": {
                "your": "‚úÖ –ï—Å—Ç—å" if safe_get(your_meta, "canonical", False) else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                "comp": "‚úÖ –ï—Å—Ç—å" if safe_get(comp_meta, "canonical", False) else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            },
            "load_time": {
                "your": safe_get(your_result, "load_time"),
                "comp": safe_get(comp_result, "load_time")
            },
            "size_kb": {
                "your": safe_get(your_result, "size_kb"),
                "comp": safe_get(comp_result, "size_kb")
            },
            "mobile_load_time": {
                "your": safe_get(your_mobile, "load_time"),
                "comp": safe_get(comp_mobile, "load_time")
            }
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–º: {e}")
        return None


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Application.builder().token(BOT_TOKEN).build()

        # === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
        app.add_handler(CommandHandler("start", lambda u, c: u.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)
        )))
        app.add_handler(CommandHandler("set_competitor", set_competitor))
        app.add_handler(CommandHandler("admin_check", admin_check))

        # === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        # === –ó–∞–ø—É—Å–∫ ===
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
        await app.run_polling(drop_pending_updates=True)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


# === –ó–∞–ø—É—Å–∫ (–¥–ª—è Python 3.7+) ===
if __name__ == "__main__":
    asyncio.run(main())